(function(){
  var tg = (window.Telegram && window.Telegram.WebApp) ? window.Telegram.WebApp : null;

  function onReady(fn){
    if(document.readyState === 'loading'){ document.addEventListener('DOMContentLoaded', fn); }
    else { fn(); }
  }

  // ==== Storage (—Å fallback –≤ –ø–∞–º—è—Ç—å) ====
  var STORAGE_KEY = 'demo_profile_v7';
  var memStore = null;

  function loadProfile(){
    try{
      var raw = localStorage.getItem(STORAGE_KEY);
      if(raw) return JSON.parse(raw);
    }catch(e){}
    return memStore || {
      real_name:'–î–º–∏—Ç—Ä–∏–π',
      psn:'swiezdo',
      platform:['üéÆ PlayStation'],
      modes:['üèπ –í—ã–∂–∏–≤–∞–Ω–∏–µ','üóª –ò—Å–ø—ã—Ç–∞–Ω–∏—è –ò—ë'],
      goals:['üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–µ–≤'],
      difficulty:['üëª –ö–æ—à–º–∞—Ä','üî• HellMode']
    };
  }
  function saveProfile(p){
    try{ localStorage.setItem(STORAGE_KEY, JSON.stringify(p)); }
    catch(e){ memStore = p; }
  }

  // ==== –ù–∞–±–æ—Ä—ã –¥–ª—è —á–∏–ø–æ–≤ ====
  var PLATFORM   = ['üéÆ PlayStation','üíª –ü–ö'];
  var MODES      = ['üìñ –°—é–∂–µ—Ç','üèπ –í—ã–∂–∏–≤–∞–Ω–∏–µ','üóª –ò—Å–ø—ã—Ç–∞–Ω–∏—è –ò—ë','‚öîÔ∏è –°–æ–ø–µ—Ä–Ω–∏–∫–∏','üìú –ì–ª–∞–≤—ã'];
  var GOALS      = ['üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–µ–≤','üîé –£–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ','üë• –ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤'];
  var DIFFICULTY = ['ü•â –ë—Ä–æ–Ω–∑–∞','ü•à –°–µ—Ä–µ–±—Ä–æ','ü•á –ó–æ–ª–æ—Ç–æ','üèÖ –ü–ª–∞—Ç–∏–Ω–∞','üëª –ö–æ—à–º–∞—Ä','üî• HellMode'];

  // ==== –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–æ—Ñ–µ–µ–≤ ====
  // –ü–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ–π RAW-URL GitHub, –Ω–∞–ø—Ä–∏–º–µ—Ä:
  // const TROPHIES_JSON_URL = 'https://raw.githubusercontent.com/USERNAME/REPO/BRANCH/trophies.json';
  const TROPHIES_JSON_URL = './trophies.json';
  var trophiesCache = null;

  function renderChips(container, values){
    container.innerHTML = '';
    values.forEach(function(v){
      var b = document.createElement('button');
      b.type = 'button';
      b.className = 'chip-btn';
      b.textContent = v;
      b.setAttribute('data-value', v);
      container.appendChild(b);
    });
  }
  function setChipsActive(container, selectedArr){
    var set = new Set(selectedArr || []);
    container.querySelectorAll('.chip-btn').forEach(function(btn){
      var val = btn.getAttribute('data-value');
      btn.classList.toggle('active', set.has(val));
    });
  }
  function getSelectedFromChips(container){
    return Array.from(container.querySelectorAll('.chip-btn.active')).map(function(b){ return b.getAttribute('data-value'); });
  }
  function joinLines(arr){ return (arr && arr.length) ? arr.join('\n') : '‚Äî'; }

  // ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ UI =====
  function scrollTopSmooth(){ try{ window.scrollTo({top:0, behavior:'smooth'}); }catch(e){ window.scrollTo(0,0); } }
  function showFeedback(message){
    try{
      if(tg && tg.showPopup){ tg.showPopup({title:'–ì–æ—Ç–æ–≤–æ', message}); return; }
    }catch(e){}
    var t = document.createElement('div');
    t.textContent = message;
    t.style.position = 'fixed';
    t.style.top = '12px';
    t.style.left = '50%';
    t.style.transform = 'translateX(-50%)';
    t.style.padding = '10px 14px';
    t.style.borderRadius = '12px';
    t.style.border = '1px solid var(--stroke)';
    t.style.background = 'var(--card)';
    t.style.color = 'var(--fg)';
    t.style.zIndex = '9999';
    t.style.boxShadow = '0 4px 16px rgba(0,0,0,.25)';
    document.body.appendChild(t);
    setTimeout(function(){ if(t && t.parentNode) t.parentNode.removeChild(t); }, 1600);
  }

  // ===== –ù–∞–≤–∏–≥–∞—Ü–∏—è =====
  function showTopbar(show, title){
    var tb = document.querySelector('.topbar');
    tb.style.display = show ? 'flex' : 'none';
    if(title) document.getElementById('appTitle').textContent = title;
  }

  function showScreen(name) {
    ['homeScreen', 'profileScreen', 'trophiesScreen', 'trophyDetailScreen']
      .forEach(id => document.getElementById(id).classList.add('hidden'));

    if (name === 'home') {
      document.getElementById('homeScreen').classList.remove('hidden');
      showTopbar(false);
    } else if (name === 'profile') {
      document.getElementById('profileScreen').classList.remove('hidden');
      showTopbar(true, '–ü—Ä–æ—Ñ–∏–ª—å');
    } else if (name === 'trophies') {
      document.getElementById('trophiesScreen').classList.remove('hidden');
      showTopbar(true, '–¢—Ä–æ—Ñ–µ–∏');
    } else if (name === 'trophyDetail') {
      document.getElementById('trophyDetailScreen').classList.remove('hidden');
      showTopbar(true, '–¢—Ä–æ—Ñ–µ–∏');
    }
    scrollTopSmooth();
  }

  // ===== –¢—Ä–æ—Ñ–µ–∏ (–¥–∞–Ω–Ω—ã–µ) =====
  function fetchTrophies(){
    if(trophiesCache) return Promise.resolve(trophiesCache);
    return fetch(TROPHIES_JSON_URL, {cache:'no-store'})
      .then(function(r){ return r.json(); })
      .then(function(data){ trophiesCache = data || {}; return trophiesCache; })
      .catch(function(){ return {}; });
  }

  // ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====
  onReady(function(){
    // UI refs
    var userChip = document.getElementById('userChip');

    // Home
    var openProfileBtn = document.getElementById('openProfileBtn');
    var trophiesBtn    = document.getElementById('trophiesBtn');
    var builderBtn     = document.getElementById('builderBtn');

    // Profile
    var form = document.getElementById('profileForm');
    var resetBtn = document.getElementById('resetBtn');
    var homeBtn = document.getElementById('homeBtn');

    var out = {
      real_name:  document.getElementById('v_real_name'),
      psn:        document.getElementById('v_psn'),
      platform:   document.getElementById('v_platform'),
      modes:      document.getElementById('v_modes'),
      goals:      document.getElementById('v_goals'),
      difficulty: document.getElementById('v_difficulty'),
      trophies:   document.getElementById('v_trophies')
    };

    var platformChips   = document.getElementById('platformChips');
    var modesChips      = document.getElementById('modesChips');
    var goalsChips      = document.getElementById('goalsChips');
    var difficultyChips = document.getElementById('difficultyChips');

    // Trophies
    var trophyList     = document.getElementById('trophyList');
    var trophiesHomeBtn= document.getElementById('trophiesHomeBtn');

    // Trophy detail
    var trophyTitle = document.getElementById('trophyTitle');
    var trophyDesc  = document.getElementById('trophyDesc');
    var proofForm   = document.getElementById('proofForm');
    var backToListBtn = document.getElementById('backToListBtn');

    // –¢–µ–º–∞ Telegram (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ)
    try{
      if(tg && tg.themeParams){
        var tp = tg.themeParams;
        if(tp.bg_color)     document.documentElement.style.setProperty('--bg', tp.bg_color);
        if(tp.text_color)   document.documentElement.style.setProperty('--fg', tp.text_color);
        if(tp.hint_color)   document.documentElement.style.setProperty('--muted', tp.hint_color);
        if(tp.button_color) document.documentElement.style.setProperty('--accent', tp.button_color);
        if(tg.ready) tg.ready();
        if(tg.expand) tg.expand();
        var me = tg.initDataUnsafe ? tg.initDataUnsafe.user : null;
        if(me && me.first_name) userChip.textContent = me.first_name;
        else userChip.textContent = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      } else {
        userChip.textContent = '–î–µ–º–æ';
      }
    }catch(e){}

    // –†–∏—Å—É–µ–º —á–∏–ø—ã
    renderChips(platformChips, PLATFORM);
    renderChips(modesChips, MODES);
    renderChips(goalsChips, GOALS);
    renderChips(difficultyChips, DIFFICULTY);

    // –ü—Ä–æ—Ñ–∏–ª—å -> —Ñ–æ—Ä–º–∞
    var p = loadProfile();
    renderProfile(p);
    fillForm(p);
    setChipsActive(platformChips,   p.platform || []);
    setChipsActive(modesChips,      p.modes || []);
    setChipsActive(goalsChips,      p.goals || []);
    setChipsActive(difficultyChips, p.difficulty || []);

    // –¢–æ–≥–≥–ª –ø–æ –∫–ª–∏–∫—É (—á–∏–ø—ã)
    function toggleHandler(e){
      if(e.target && e.target.classList.contains('chip-btn')){
        e.target.classList.toggle('active');
      }
    }
    platformChips.addEventListener('click', toggleHandler);
    modesChips.addEventListener('click', toggleHandler);
    goalsChips.addEventListener('click', toggleHandler);
    difficultyChips.addEventListener('click', toggleHandler);

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    form.addEventListener('submit', function(e){
      e.preventDefault();
      var updated = {
        real_name: (form.real_name.value || '').trim(),
        psn:       (form.psn.value || '').trim(),
        platform:  getSelectedFromChips(platformChips),
        modes:     getSelectedFromChips(modesChips),
        goals:     getSelectedFromChips(goalsChips),
        difficulty:getSelectedFromChips(difficultyChips)
      };
      saveProfile(updated);
      renderProfile(updated);
      try{ if(tg && tg.HapticFeedback && tg.HapticFeedback.notificationOccurred) tg.HapticFeedback.notificationOccurred('success'); }catch(e){}
      showFeedback('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω');
      scrollTopSmooth();
    });

    // –°–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è
    resetBtn.addEventListener('click', function(){
      var empty = { real_name:'', psn:'', platform:[], modes:[], goals:[], difficulty:[] };
      saveProfile(empty);
      renderProfile(empty);
      fillForm(empty);
      setChipsActive(platformChips, []);
      setChipsActive(modesChips, []);
      setChipsActive(goalsChips, []);
      setChipsActive(difficultyChips, []);
      try{ if(tg && tg.HapticFeedback && tg.HapticFeedback.impactOccurred) tg.HapticFeedback.impactOccurred('light'); }catch(e){}
      showFeedback('–ü—Ä–æ—Ñ–∏–ª—å –æ—á–∏—â–µ–Ω');
      scrollTopSmooth();
    });

    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –ø–æ–∑–∂–µ
    document.addEventListener('click', function (e) {
      const t = e.target.closest('button, a.big-btn'); // –ª–æ–≤–∏–º –∏ <button>, –∏ –Ω–∞—à—É –±–æ–ª—å—à—É—é <a>
      if (!t) return;

      // –ù–µ –¥–∞—ë–º —Ç–µ–∫—Å—Ç—É –≤—ã–¥–µ–ª—è—Ç—å—Å—è/–ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –¥–ª–∏–Ω–Ω–æ–º —Ç–∞–ø–µ
      t.blur();

      // –î–æ–º–æ–π (–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è / —Ç—Ä–æ—Ñ–µ–µ–≤)
      if (t.id === 'homeBtn' || t.id === 'trophiesHomeBtn') {
        showScreen('home');
        e.preventDefault();
        return;
      }

      // –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      if (t.id === 'openProfileBtn') {
        showScreen('profile');
        e.preventDefault();
        return;
      }

      // –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–æ—Ñ–µ–µ–≤
      if (t.id === 'trophiesBtn') {
        populateTrophyList();
        showScreen('trophies');
        e.preventDefault();
        return;
      }

      // –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–æ—Ñ–µ–µ–≤
      if (t.id === 'backToListBtn') {
        showScreen('trophies');
        e.preventDefault();
        return;
      }

      // –ö–Ω–æ–ø–∫–∞ ¬´—Ç—Ä–æ—Ñ–µ–π –≤ —Å–ø–∏—Å–∫–µ¬ª
      if (t.classList.contains('list-btn') && t.dataset.id) {
        openTrophyDetail(t.dataset.id);
        e.preventDefault();
        return;
      }
    }, { passive: true });


    // –ó–∞–≥–ª—É—à–∫–∞ –±–∏–ª–¥–µ—Ä–∞
    function soon(){ showFeedback('–°–∫–æ—Ä–æ! –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.'); }
    builderBtn.addEventListener('click', soon);

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –î–æ–º–æ–π
    showScreen('home');

    function renderProfile(p){
      out.real_name.textContent   = p.real_name || '‚Äî';
      out.psn.textContent         = p.psn || '‚Äî';
      out.platform.textContent    = joinLines(p.platform);
      out.modes.textContent       = joinLines(p.modes);
      out.goals.textContent       = joinLines(p.goals);
      out.difficulty.textContent  = joinLines(p.difficulty);
      out.trophies.innerHTML      = '–õ–µ–≥–µ–Ω–¥–∞ –¶—É—Å–∏–º—ã üó°<br>–õ–µ–≥–µ–Ω–¥–∞ –≠–¥–∑–æ üèî';
    }
    function fillForm(p){
      form.real_name.value = p.real_name || '';
      form.psn.value       = p.psn || '';
    }

    // ====== –¢–†–û–§–ï–ò: —Å–ø–∏—Å–æ–∫ + –¥–µ—Ç–∞–ª–∏ ======
    function populateTrophyList(){
      fetchTrophies().then(function(data){
        trophyList.innerHTML = '';
        Object.keys(data).forEach(function(key){
          var t = data[key];
          var btn = document.createElement('button');
          btn.className = 'list-btn';
          btn.type = 'button';
          btn.setAttribute('data-id', key);
          btn.innerHTML = '<span>' + (t.name || key) + ' ' + (t.emoji || '') + '</span><span class="right">‚Ä∫</span>';
          btn.addEventListener('click', function(){ openTrophyDetail(key); });
          trophyList.appendChild(btn);
        });
      });
    }

    function openTrophyDetail(key){
      fetchTrophies().then(function(data){
        var t = data[key] || {};
        var title = (t.name || '–¢—Ä–æ—Ñ–µ–π') + (t.emoji ? ' ' + t.emoji : '');
        trophyTitle.textContent = title;
        trophyDesc.innerHTML = '';
        (t.description || ['–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç.']).forEach(function(line){
          var li = document.createElement('li');
          li.textContent = line;
          trophyDesc.appendChild(li);
        });
        showScreen('trophyDetail');
      });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ (—Ç–µ—Å—Ç)
    proofForm.addEventListener('submit', function(e){
      e.preventDefault();
      var files = document.getElementById('proofFiles').files;
      var count = files ? files.length : 0;
      // —Ç—É—Ç –≤ –±—É–¥—É—â–µ–º: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
      showFeedback('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (—Ç–µ—Å—Ç). –§–∞–π–ª–æ–≤: ' + count);
      try{ if(tg && tg.HapticFeedback && tg.HapticFeedback.notificationOccurred) tg.HapticFeedback.notificationOccurred('success'); }catch(e){}
      showScreen('trophies');
    });
  });
})();
