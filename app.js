(function(){
  // ==== Telegram SDK (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–∏) ====
  var tg = (window.Telegram && window.Telegram.WebApp) ? window.Telegram.WebApp : null;
  function initTG(){
    if(!tg) return;
    try{
      tg.ready();
      tg.expand();
      var th = tg.themeParams || {};
      if(th.bg_color)   document.documentElement.style.setProperty('--tg-bg', th.bg_color);
      if(th.text_color) document.documentElement.style.setProperty('--tg-tx', th.text_color);
      if(th.hint_color) document.documentElement.style.setProperty('--tg-hint', th.hint_color);
      document.documentElement.classList.add('tg');
    }catch(e){}
  }
  function haptic(type){ try{ tg && tg.HapticFeedback && tg.HapticFeedback.notificationOccurred(type); }catch(e){} }
  function tap(){ try{ tg && tg.HapticFeedback && tg.HapticFeedback.impactOccurred('light'); }catch(e){} }

  function onReady(fn){
    if(document.readyState === 'loading'){ document.addEventListener('DOMContentLoaded', fn); }
    else { fn(); }
  }

  // ==== Storage (—Å fallback –≤ –ø–∞–º—è—Ç—å) ====
  var STORAGE_KEY = 'demo_profile_v8';
  var memStore = null;

  function loadProfile(){
    try{
      var raw = localStorage.getItem(STORAGE_KEY);
      if(raw) return JSON.parse(raw);
    }catch(e){}
    return memStore || { real_name:'', psn:'', platform:[], modes:[], goals:[], difficulty:[] };
  }
  function saveProfile(p){
    try{ localStorage.setItem(STORAGE_KEY, JSON.stringify(p)); }
    catch(e){ memStore = p; }
  }

  // ==== –ù–∞–±–æ—Ä—ã –¥–ª—è —á–∏–ø–æ–≤ (–†–û–í–ù–û –∫–∞–∫ –≤ —Ç–≤–æ—ë–º –ø—Ä–æ–µ–∫—Ç–µ) ====
  var PLATFORM   = ['üéÆ PlayStation','üíª –ü–ö'];
  var MODES      = ['üìñ –°—é–∂–µ—Ç','üèπ –í—ã–∂–∏–≤–∞–Ω–∏–µ','üóª –ò—Å–ø—ã—Ç–∞–Ω–∏—è –ò—ë','‚öîÔ∏è –°–æ–ø–µ—Ä–Ω–∏–∫–∏','üìú –ì–ª–∞–≤—ã'];
  var GOALS      = ['üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–µ–≤','üîé –£–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ','üë• –ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤'];
  var DIFFICULTY = ['ü•â –ë—Ä–æ–Ω–∑–∞','ü•à –°–µ—Ä–µ–±—Ä–æ','ü•á –ó–æ–ª–æ—Ç–æ','üèÖ –ü–ª–∞—Ç–∏–Ω–∞','üëª –ö–æ—à–º–∞—Ä','üî• HellMode'];

  // ==== –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–æ—Ñ–µ–µ–≤ ====
  // –î–ª—è GitHub Pages –ø–æ–¥—Å—Ç–∞–≤—å RAW-URL:
  // const TROPHIES_JSON_URL = 'https://raw.githubusercontent.com/USERNAME/REPO/BRANCH/trophies.json';
  const TROPHIES_JSON_URL = './trophies.json';
  var trophiesCache = null;

  function renderChips(container, values){
    container.innerHTML = '';
    values.forEach(function(v){
      var b = document.createElement('button');
      b.type = 'button';
      b.className = 'chip-btn';
      b.textContent = v;
      b.setAttribute('data-value', v);
      container.appendChild(b);
    });
  }
  function setChipsActive(container, selectedArr){
    var set = new Set(selectedArr || []);
    container.querySelectorAll('.chip-btn').forEach(function(btn){
      var val = btn.getAttribute('data-value');
      btn.classList.toggle('active', set.has(val));
    });
  }
  function getSelectedFromChips(container){
    var arr = [];
    container.querySelectorAll('.chip-btn.active').forEach(function(btn){
      arr.push(btn.getAttribute('data-value'));
    });
    return arr;
  }
  function joinLines(arr){
    if(!arr || !arr.length) return '‚Äî';
    return arr.join('\n');
  }

  function scrollTopSmooth(){ window.scrollTo({top:0, behavior:'smooth'}); }

  onReady(function(){
    initTG();

    // ==== –í—ã—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è ====
    var out = {
      real_name:  document.getElementById('v_real_name'),
      psn:        document.getElementById('v_psn'),
      platform:   document.getElementById('v_platform'),
      modes:      document.getElementById('v_modes'),
      goals:      document.getElementById('v_goals'),
      difficulty: document.getElementById('v_difficulty'),
    };

    var platformChips   = document.getElementById('platformChips');
    var modesChips      = document.getElementById('modesChips');
    var goalsChips      = document.getElementById('goalsChips');
    var difficultyChips = document.getElementById('difficultyChips');

    renderChips(platformChips, PLATFORM);
    renderChips(modesChips, MODES);
    renderChips(goalsChips, GOALS);
    renderChips(difficultyChips, DIFFICULTY);

    var p = loadProfile();
    renderProfile(p);
    fillForm(p);
    setChipsActive(platformChips,   p.platform || []);
    setChipsActive(modesChips,      p.modes || []);
    setChipsActive(goalsChips,      p.goals || []);
    setChipsActive(difficultyChips, p.difficulty || []);

    // –ö–ª–∏–∫–∏ –ø–æ —á–∏–ø–∞–º (–º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä)
    document.addEventListener('click', function(e){
      var c = e.target.closest('.chip-btn');
      if(!c) return;
      c.classList.toggle('active');
      tap();
    }, {passive:true});

    // ==== –§–æ—Ä–º–∞ –ø—Ä–æ—Ñ–∏–ª—è ====
    var profileForm = document.getElementById('profileForm');
    var resetBtn    = document.getElementById('resetBtn');

    function renderProfile(p){
      out.real_name.textContent   = p.real_name || '‚Äî';
      out.psn.textContent         = p.psn || '‚Äî';
      out.platform.textContent    = joinLines(p.platform);
      out.modes.textContent       = joinLines(p.modes);
      out.goals.textContent       = joinLines(p.goals);
      out.difficulty.textContent  = joinLines(p.difficulty);
    }
    function fillForm(p){
      profileForm.real_name.value = p.real_name || '';
      profileForm.psn.value       = p.psn || '';
    }

    profileForm.addEventListener('submit', function(e){
      e.preventDefault();
      var updated = {
        real_name: profileForm.real_name.value.trim(),
        psn:       profileForm.psn.value.trim(),
        platform:  getSelectedFromChips(platformChips),
        modes:     getSelectedFromChips(modesChips),
        goals:     getSelectedFromChips(goalsChips),
        difficulty:getSelectedFromChips(difficultyChips)
      };
      saveProfile(updated);
      renderProfile(updated);
      haptic('success');
      showFeedback('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω');
      scrollTopSmooth();
    });

    resetBtn.addEventListener('click', function(){
      var empty = { real_name:'', psn:'', platform:[], modes:[], goals:[], difficulty:[] };
      saveProfile(empty);
      renderProfile(empty);
      fillForm(empty);
      setChipsActive(platformChips, []);
      setChipsActive(modesChips, []);
      setChipsActive(goalsChips, []);
      setChipsActive(difficultyChips, []);
      tap();
      showFeedback('–ü—Ä–æ—Ñ–∏–ª—å –æ—á–∏—â–µ–Ω');
      scrollTopSmooth();
    });

    // ==== –¢—Ä–æ—Ñ–µ–∏: —Å–ø–∏—Å–æ–∫ + –¥–µ—Ç–∞–ª–∏ ====
    var trophyList      = document.getElementById('trophyList');
    var trophyTitle     = document.getElementById('trophyTitle');
    var trophyDesc      = document.getElementById('trophyDesc');
    var proofForm       = document.getElementById('proofForm');

    function fetchTrophies(){
      if(trophiesCache) return Promise.resolve(trophiesCache);
      return fetch(TROPHIES_JSON_URL, {cache:'no-store'})
        .then(function(r){ return r.json(); })
        .then(function(data){ trophiesCache = data || {}; return trophiesCache; })
        .catch(function(){ return {}; });
    }

    function populateTrophyList(){
      fetchTrophies().then(function(data){
        trophyList.innerHTML = '';
        Object.keys(data).forEach(function(key){
          var t = data[key];
          var btn = document.createElement('button');
          btn.className = 'list-btn';
          btn.type = 'button';
          btn.setAttribute('data-id', key);
          btn.innerHTML = '<span>' + (t.name || key) + ' ' + (t.emoji || '') + '</span><span class="right">‚Ä∫</span>';
          trophyList.appendChild(btn);
        });
      });
    }

    function openTrophyDetail(key){
      fetchTrophies().then(function(data){
        var t = data[key] || {};
        var title = (t.name || '–¢—Ä–æ—Ñ–µ–π') + (t.emoji ? ' ' + t.emoji : '');
        trophyTitle.textContent = title;
        trophyDesc.innerHTML = '';
        (t.description || ['–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç.']).forEach(function(line){
          var li = document.createElement('li');
          li.textContent = line;
          trophyDesc.appendChild(li);
        });
        // –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∏ Telegram MainButton
        showScreen('trophyDetail');
        if(tg){
          tg.MainButton.setParams({ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', is_active: true, is_visible: true });
          tg.MainButton.show();
          tg.BackButton.show();
        }
      });
    }

    populateTrophyList();

    // ==== –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ (—Ç–µ—Å—Ç) ====
    function submitProof(){
      var filesInput = document.getElementById('proofFiles');
      var commentEl  = document.getElementById('commentText'); // –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ HTML
      var count = filesInput && filesInput.files ? filesInput.files.length : 0;
      var comment = commentEl ? (commentEl.value || '').trim() : '';

      if(count === 0 && !comment){
        if(tg && tg.showPopup){
          tg.showPopup({ title:'–ù—É–∂–Ω–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', message:'–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏/–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.', buttons:[{type:'ok'}] });
        } else {
          alert('–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏/–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.');
        }
        haptic('error');
        return;
      }
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∞–ø–ª–æ–∞–¥ –Ω–∞ –±—ç–∫–µ–Ω–¥.

      haptic('success');
      if(tg && tg.showPopup){
        tg.showPopup({ title:'–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', message:'–°–ø–∞—Å–∏–±–æ! –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É.', buttons:[{type:'ok'}] });
      } else {
        alert('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (—Ç–µ—Å—Ç). –§–∞–π–ª–æ–≤: ' + count + (comment ? '\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ' + comment : ''));
      }
      showScreen('trophies');
      if(tg){
        tg.MainButton.hide();
        tg.BackButton.hide();
      }
    }

    proofForm.addEventListener('submit', function(e){
      e.preventDefault();
      submitProof();
    });

    // ==== –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∫–ª–∏–∫–∏ ====
    function showTopbar(visible, title){
      var tb = document.querySelector('.topbar');
      if(!tb) return;
      tb.style.display = visible ? 'flex' : 'none';
      if(title) document.getElementById('appTitle').textContent = title;
    }

    function showScreen(name){
      var screens = ['homeScreen','profileScreen','trophiesScreen','trophyDetailScreen'];
      screens.forEach(function(id){ document.getElementById(id).classList.add('hidden'); });

      if(name === 'home'){
        document.getElementById('homeScreen').classList.remove('hidden');
        showTopbar(false);
      } else if(name === 'profile'){
        document.getElementById('profileScreen').classList.remove('hidden');
        showTopbar(true, '–ü—Ä–æ—Ñ–∏–ª—å');
      } else if(name === 'trophies'){
        document.getElementById('trophiesScreen').classList.remove('hidden');
        showTopbar(true, '–¢—Ä–æ—Ñ–µ–∏');
      } else if(name === 'trophyDetail'){
        document.getElementById('trophyDetailScreen').classList.remove('hidden');
        showTopbar(true, '–¢—Ä–æ—Ñ–µ–∏');
      }
      scrollTopSmooth();
    }

    document.addEventListener('click', function(e){
      var t = e.target.closest('button, a.big-btn');
      if(!t) return;

      // –î–æ–º–æ–π
      if(t.id === 'homeBtn' || t.id === 'trophiesHomeBtn'){
        showScreen('home');
        e.preventDefault();
        return;
      }

      // –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      if(t.id === 'openProfileBtn'){
        showScreen('profile');
        e.preventDefault();
        return;
      }

      // –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–æ—Ñ–µ–µ–≤
      if(t.id === 'trophiesBtn'){
        showScreen('trophies');
        e.preventDefault();
        return;
      }

      // –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–æ—Ñ–µ–µ–≤
      if(t.id === 'backToListBtn'){
        showScreen('trophies');
        e.preventDefault();
        return;
      }

      // –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–æ—Ñ–µ—è
      if(t.classList.contains('list-btn') && t.dataset.id){
        openTrophyDetail(t.dataset.id);
        e.preventDefault();
        return;
      }
      // –°—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É (a.big-btn –±–µ–∑ id) –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º ‚Äî –ø—É—Å—Ç—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
    }, {passive:true});

    // Telegram MainButton/BackButton
    if(tg){
      tg.onEvent('mainButtonClicked', submitProof);
      tg.onEvent('backButtonClicked', function(){ showScreen('trophies'); tg.MainButton.hide(); tg.BackButton.hide(); });
    }

    // –°—Ç–∞—Ä—Ç: –î–æ–º–æ–π
    showScreen('home');
  });
})();
