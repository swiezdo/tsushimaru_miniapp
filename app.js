(function(){
  // –ë–ï–ó —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞, —á—Ç–æ–±—ã Telegram WebView –Ω–µ —Ç—É–ø–∏–ª

  var tg = (window.Telegram && window.Telegram.WebApp) ? window.Telegram.WebApp : null;

  function onReady(fn){
    if(document.readyState === 'loading'){
      document.addEventListener('DOMContentLoaded', fn);
    } else {
      fn();
    }
  }

  // ===== –•—Ä–∞–Ω–∏–ª–∏—â–µ: localStorage —Å fallback –≤ –ø–∞–º—è—Ç—å =====
  var STORAGE_KEY = 'demo_profile_v3';
  var memStore = null;

  function loadProfile(){
    try{
      var raw = localStorage.getItem(STORAGE_KEY);
      if(raw){ return JSON.parse(raw); }
    }catch(e){ /* no-op */ }
    return memStore || {
      real_name:'–î–º–∏—Ç—Ä–∏–π',
      psn:'swiezdo',
      platform:'üéÆ PlayStation',
      modes:['üèπ –í—ã–∂–∏–≤–∞–Ω–∏–µ','üóª –ò—Å–ø—ã—Ç–∞–Ω–∏—è –ò—ë'],
      goals:['üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–µ–≤']
    };
  }
  function saveProfile(p){
    try{
      localStorage.setItem(STORAGE_KEY, JSON.stringify(p));
    }catch(e){
      memStore = p; // –µ—Å–ª–∏ localStorage –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî —Ö—Ä–∞–Ω–∏–º –≤ –ø–∞–º—è—Ç–∏ –Ω–∞ —Å–µ—Å—Å–∏—é
    }
  }

  // ===== –û—Ç—Ä–∏—Å–æ–≤–∫–∞ "—á–∏–ø–æ–≤" =====
  var MODES = ['üìñ –°—é–∂–µ—Ç','üèπ –í—ã–∂–∏–≤–∞–Ω–∏–µ','üóª –ò—Å–ø—ã—Ç–∞–Ω–∏—è –ò—ë','‚öîÔ∏è –°–æ–ø–µ—Ä–Ω–∏–∫–∏','üìú –ì–ª–∞–≤—ã'];
  var GOALS = ['üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–µ–≤','üîé –£–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ','üë• –ü–æ–∏—Å–∫ —Ç–∏–º–º–µ–π—Ç–æ–≤'];

  function renderChips(container, values){
    container.innerHTML = '';
    for(var i=0;i<values.length;i++){
      var v = values[i];
      var b = document.createElement('button');
      b.type = 'button';
      b.className = 'chip-btn';
      b.textContent = v;
      b.setAttribute('data-value', v);
      container.appendChild(b);
    }
  }
  function setChipsActive(container, selectedArr){
    var set = {};
    for(var i=0;i<selectedArr.length;i++){ set[selectedArr[i]] = true; }
    var nodes = container.querySelectorAll('.chip-btn');
    for(var j=0;j<nodes.length;j++){
      var val = nodes[j].getAttribute('data-value');
      if(set[val]) nodes[j].classList.add('active');
      else nodes[j].classList.remove('active');
    }
  }
  function getSelectedFromChips(container){
    var nodes = container.querySelectorAll('.chip-btn.active');
    var out = [];
    for(var i=0;i<nodes.length;i++){ out.push(nodes[i].getAttribute('data-value')); }
    return out;
  }

  // ===== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ =====
  onReady(function(){
    // UI refs
    var userChip = document.getElementById('userChip');
    var form = document.getElementById('profileForm');
    var resetBtn = document.getElementById('resetBtn');

    var out = {
      real_name: document.getElementById('v_real_name'),
      psn:       document.getElementById('v_psn'),
      platform:  document.getElementById('v_platform'),
      modes:     document.getElementById('v_modes'),
      goals:     document.getElementById('v_goals'),
      difficulty:document.getElementById('v_difficulty'),
      trophies:  document.getElementById('v_trophies')
    };

    var modesChips = document.getElementById('modesChips');
    var goalsChips = document.getElementById('goalsChips');

    // –¢–µ–º–∞ –¢–µ–ª–µ–≥—Ä–∞–º–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ)
    if(tg && tg.themeParams){
      try{
        var tp = tg.themeParams;
        if(tp.bg_color) document.documentElement.style.setProperty('--bg', tp.bg_color);
        if(tp.text_color) document.documentElement.style.setProperty('--fg', tp.text_color);
        if(tp.hint_color) document.documentElement.style.setProperty('--muted', tp.hint_color);
        if(tp.button_color) document.documentElement.style.setProperty('--accent', tp.button_color);
      }catch(e){}
      if(tg.ready) tg.ready();
      if(tg.expand) tg.expand();
      var me = tg.initDataUnsafe ? tg.initDataUnsafe.user : null;
      if(me && me.first_name){ userChip.textContent = me.first_name; }
    } else {
      userChip.textContent = '–î–µ–º–æ';
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —á–∏–ø—ã
    renderChips(modesChips, MODES);
    renderChips(goalsChips, GOALS);

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    var p = loadProfile();
    renderProfile(p);
    fillForm(p);
    setChipsActive(modesChips, p.modes || []);
    setChipsActive(goalsChips, p.goals || []);

    // –¢–æ–≥–≥–ª –ø–æ –∫–ª–∏–∫—É –Ω–∞ —á–∏–ø
    modesChips.addEventListener('click', function(e){
      if(e.target && e.target.classList.contains('chip-btn')){
        e.target.classList.toggle('active');
      }
    });
    goalsChips.addEventListener('click', function(e){
      if(e.target && e.target.classList.contains('chip-btn')){
        e.target.classList.toggle('active');
      }
    });

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
    form.addEventListener('submit', function(e){
      e.preventDefault();
      var updated = {
        real_name: (form.real_name.value || '').trim(),
        psn:       (form.psn.value || '').trim(),
        platform:  form.platform.value || '',
        modes:     getSelectedFromChips(modesChips),
        goals:     getSelectedFromChips(goalsChips)
      };
      saveProfile(updated);
      renderProfile(updated); // –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
      try{ if(tg && tg.HapticFeedback && tg.HapticFeedback.notificationOccurred) tg.HapticFeedback.notificationOccurred('success'); }catch(e){}
    });

    // –°–±—Ä–æ—Å–∏—Ç—å –∫ –¥–µ—Ñ–æ–ª—Ç—É
    resetBtn.addEventListener('click', function(){
      var def = {
        real_name:'–î–º–∏—Ç—Ä–∏–π',
        psn:'swiezdo',
        platform:'üéÆ PlayStation',
        modes:['üèπ –í—ã–∂–∏–≤–∞–Ω–∏–µ','üóª –ò—Å–ø—ã—Ç–∞–Ω–∏—è –ò—ë'],
        goals:['üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–µ–≤']
      };
      saveProfile(def);
      renderProfile(def);
      fillForm(def);
      setChipsActive(modesChips, def.modes);
      setChipsActive(goalsChips, def.goals);
      try{ if(tg && tg.HapticFeedback && tg.HapticFeedback.impactOccurred) tg.HapticFeedback.impactOccurred('light'); }catch(e){}
    });

    // helpers: –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É
    function renderProfile(p){
      out.real_name.textContent = p.real_name || '‚Äî';
      out.psn.textContent       = p.psn || '‚Äî';
      out.platform.textContent  = p.platform || '‚Äî';
      out.modes.textContent     = (p.modes && p.modes.length) ? p.modes.join(', ') : '‚Äî';
      out.goals.textContent     = (p.goals && p.goals.length) ? p.goals.join(', ') : '‚Äî';
      out.difficulty.innerHTML  = 'üëª –ö–æ—à–º–∞—Ä<br>üî• HellMode';
      out.trophies.innerHTML    = '–õ–µ–≥–µ–Ω–¥–∞ –¶—É—Å–∏–º—ã üó°<br>–õ–µ–≥–µ–Ω–¥–∞ –≠–¥–∑–æ üèî';
    }
    function fillForm(p){
      form.real_name.value = p.real_name || '';
      form.psn.value       = p.psn || '';
      form.platform.value  = p.platform || '';
    }
  });
})();
